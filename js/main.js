'use strict';
// –ø–æ 7 —É—Ä–æ–∫—É –Ω–∞–¥–æ –ø—Ä–æ—Å—Ç–æ –∏–¥—Ç–∏ –ø–æ –∑–∞–¥–∞–Ω–∏—é –∏ –≤—Å–µ –¥–µ–ª–∞—Ç—å –∫–∞–∫ —Ç–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Ç–æ–≥–¥–∞ –≤—Å–µ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ, –≤–æ—Ç —Ç–æ–∂–µ —Å–º–æ—Ç—Ä–∏ —á—É—Ç—å(üòâ) –¥–æ–¥–µ–ª–∞–ª —Ç–æ, —á—Ç–æ –ø—Ä–∏—Å–ª–∞–ª, —Ç—ã –ø—Ä–æ—Å—Ç–æ –∏–¥–∏ –ø–æ –∑–∞–¥–∞–Ω–∏—é –∏ —Å–º–æ—Ç—Ä–∏ –∫–∞–∫ —Ç–∞–º –Ω–∞–ø–∏—Å–∞–Ω–æ –∏ —á—Ç–æ –≤ –∫–æ–¥–µ –¥–æ–±–∞–≤–∏–ª —è.–ï—Å–ª–∏ –Ω–µ –ø–æ–π–º–µ—à—å, —Ç–æ —Å–æ–∑–≤–æ–Ω–∏–º—Å—è —Ç–æ–≥–¥–∞
const isNumber = function (n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
}

let money;

let start = function () {
    money = prompt('–í–∞—à –º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥?');

    while (!isNumber(money)) {
        money = prompt('–í–∞—à –º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥?');
    }
}

start();

let appData = {
    income: {},
    addIncome: [],
    expenses: {},
    addExpenses: [],
    deposit: false,
    mission: 50000,
    period: 3,
    budget: money,
    budgetDay: 0,
    budgetMonth: 0,
    expensesMonth: 0,
    asking: function () {
        let addExpenses = prompt('–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º—ã–π –ø–µ—Ä–∏–æ–¥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é');
        appData.addExpenses = addExpenses.toLowerCase().split(',');
        appData.deposit = confirm('–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–µ–ø–æ–∑–∏—Ç –≤ –±–∞–Ω–∫–µ?');
        for (let i = 0; i < 2; i++) {
            let a = prompt('–í–≤–µ–¥–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç—å—é —Ä–∞—Å—Ö–æ–¥–æ–≤?');
            appData.expenses[a] = +prompt('–í–æ —Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –æ–±–æ–π–¥–µ—Ç—Å—è?');
        }
    },
    getExpensesMonth: function () {
        let sum = 0;
        for (let key in appData.expenses) {
            sum += appData.expenses[key];
        }
        appData.expensesaAmount = sum;
        return console.log('–°—É–º–º–∞ –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü ', appData.expensesaAmount);
    },
    getBudget: function () { 
        appData.budgetMonth = appData.budget - appData.expensesaAmount;
        appData.budgetDay = Math.floor(appData.budgetMonth / 30);
        return appData.budgetMonth;
    },
    getTargetMonth: function () {
        return appData.period=Math.ceil(appData.mission / appData.getBudget());
    },
    getStatusIncome: function () {
        if (appData.budgetMonth > 0) {
            console.log('–¶–µ–ª—å –±—É–¥–µ—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –∑–∞ : ', appData.period, ' –º–µ—Å—è—Ü–µ–≤');
            if (Math.floor(appData.budgetMonth / 30) <= 600 && Math.floor(appData.budgetMonth / 30) >= 0) {
                return console.log('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ');
            } else if (Math.floor(appData.budgetMonth / 30) && Math.floor(appData.budgetMonth / 30)) {
                return console.log('–£ –≤–∞—Å —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞');
            } else if (Math.floor(appData.budgetMonth / 30) > 1200) {
                return console.log('–£ –≤–∞—Å –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞');
            } else {
                return console.log('–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫');
            }
        }
        else {
            console.log('–ù–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏');
        }
    }
}

appData.asking();
appData.getExpensesMonth();
appData.getBudget();
appData.getTargetMonth();
appData.getStatusIncome();

console.log('–ù–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –¥–∞–Ω–Ω—ã–µ:');
for (let key in appData) {
    console.log( '–ö–ª—é—á: ' + key + ' –∑–Ω–∞—á–µ–Ω–∏–µ: ' + appData[key] );
  }